/* @flow */
// https://ustbhuangyi.github.io/vue-analysis/v2/data-driven/create-element.html#children-%E7%9A%84%E8%A7%84%E8%8C%83%E5%8C%96

import VNode, { createTextVNode } from "core/vdom/vnode";
import { isFalse, isTrue, isDef, isUndef, isPrimitive } from "shared/util";

// The template compiler attempts to minimize the need for normalization by
// statically analyzing the template at compile time.
//
// For plain HTML markup, normalization can be completely skipped because the
// generated render function is guaranteed to return Array<VNode>. There are
// two cases where extra normalization is needed:

// 1. When the children contains components - because a functional component
// may return an Array instead of a single root. In this case, just a simple
// normalization is needed - if any child is an Array, we flatten the whole
// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep
// because functional components already normalize their own children.

// 函数式组件可能返回的是一个数组而不是一个根节点
// 所以会通过 Array.prototype.concat 方法把整个 children 数组打平，让它的深度只有一层
// children: [child1:[r1,r2]，child2]
export function simpleNormalizeChildren(children: any) {
  for (let i = 0; i < children.length; i++) {
    if (Array.isArray(children[i])) {
      return Array.prototype.concat.apply([], children); // 扁平化二阶数组
    }
  }
  return children;
}

// 2. When the children contains constructs that always generated nested Arrays,
// e.g. <template>, <slot>, v-for, or when the children is provided by user
// with hand-written render functions / JSX. In such cases a full normalization
// is needed to cater to all possible types of children values.

// 当编译 slot、v-for 的时候会产生嵌套数组的情况，会调用 normalizeArrayChildren 方法
export function normalizeChildren(children: any): ?Array<VNode> {
  return isPrimitive(children) // 是一个基本类型的节点的情况
    ? [createTextVNode(children)] // 创建单个简单的文本节点
    : Array.isArray(children) // 是嵌套数组的情况
    ? normalizeArrayChildren(children)
    : undefined;
}

function isTextNode(node): boolean {
  return isDef(node) && isDef(node.text) && isFalse(node.isComment);
}

function normalizeArrayChildren(
  children: any,
  nestedIndex?: string
): Array<VNode> {
  const res = [];
  let i, c, lastIndex, last;
  // children: [child1:[r1,r2,r3]，child2]
  // [r1,r2,]
  for (i = 0; i < children.length; i++) {
    c = children[i];
    if (isUndef(c) || typeof c === "boolean") continue;
    lastIndex = res.length - 1;
    last = res[lastIndex];
    //  nested
    if (Array.isArray(c)) {
      // 数组情况则递归调用
      if (c.length > 0) {
        c = normalizeArrayChildren(c, `${nestedIndex || ""}_${i}`);
        // merge adjacent text nodes 合并连续text 节点
        if (isTextNode(c[0]) && isTextNode(last)) {
          res[lastIndex] = createTextVNode(last.text + (c[0]: any).text);
          c.shift();
        }
        res.push.apply(res, c);
      }
    } else if (isPrimitive(c)) {
      if (isTextNode(last)) {
        // merge adjacent text nodes 合并连续text 节点
        // this is necessary for SSR hydration because text nodes are
        // essentially merged when rendered to HTML strings
        res[lastIndex] = createTextVNode(last.text + c); // 结果数组中上一个节点是字符串，当前这个也是，则进行合并并覆盖上一个节点
      } else if (c !== "") {
        // convert primitive to vnode
        res.push(createTextVNode(c)); // 不是空字符串，则推入一个新节点，如果是空串，则什么都不做
      }
    } else {
      // 当前遍历到的是vnode节点
      if (isTextNode(c) && isTextNode(last)) {
        // merge adjacent text nodes 合并连续text 节点
        res[lastIndex] = createTextVNode(last.text + c.text);
      } else {
        // default key for nested array children (likely generated by v-for)
        // 列表还存在嵌套的情况
        if (
          isTrue(children._isVList) &&
          isDef(c.tag) &&
          isUndef(c.key) &&
          isDef(nestedIndex)
        ) {
          c.key = `__vlist${nestedIndex}_${i}__`;
        }
        res.push(c);
      }
    }
  }
  return res;
}
